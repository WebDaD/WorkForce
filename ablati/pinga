#!/usr/bin/perl -w
#
# Ping-Angel (Part of Nassa Ablatorum)
#
# Dominik Sigmund, 2014-09-17
#

use utf8;
use strict;
use Getopt::Long ();

use IO::Socket::INET;
use Net::Ping;
use File::Pid;
use JSON;
use POSIX qw(strftime);

my $angelName    = "pinga";
my $VERSION = '0.01';

my ($path, $self) = $0 =~ /(.*\/)([^\/]*$)/;
my ($user, $home) = (getpwuid($<))[0,7];
my $host = `uname -n`; chop($host); $host =~ s/\..*//;
binmode(STDOUT, ':utf8') or die "can't set binmode utf8 for STDOUT': $!";

my $option =	# option defaults
{
	debug		=> 0,
	help		=> 0,
	version		=> 0,
	port		=> 26435, 	# listening on this port
	maxdata		=> 10240, 	# max length receiver in bytes
	logfile		=> '',		# log to here
	configfile	=> '', 		# override local params
	logging		=> 0, 		# Log files
	strict		=> 1, 		# Only do something if data in json is fitting sender data
};
Getopt::Long::Parser->new()->getoptions
(
	$option,
	'debug+',
	'help|?'	=> sub { help() },
	'version|v'	=> sub { print "$angelName - Version: $VERSION\n"; exit 0; },
	'port=i',
	'maxdata=i',
	'logfile=s',
	'configfile=s',
	'logging|l',
	'strict|s'
);

sub help
{
	#TODO: print options
	exit 0;
}

my $dieNow        = 0;
my $pidFilePath   = "/var/run/";
my $pidFile       = $pidFilePath . $angelName . ".pid";
my $pidfile;

main();
exit;

#----------------------------------------------------------------------------
# Main
#----------------------------------------------------------------------------

sub main
{
	# TODO: if configfile -> parse and override $option
	
	if($option->{debug} ne 1){
		daemonize();
	}
	
	until ($dieNow) {
		# auto-flush on socket
		$| = 1;
		
		# creating a listening socket
		my $socket = new IO::Socket::INET (
		    LocalHost => '0.0.0.0',
		    LocalPort => $option->{port},
		    Proto => 'tcp',
		    Listen => 5,
		    Reuse => 1
		);
		die "cannot create socket $!\n" unless $socket;
		dplog("server waiting for client connection on port 7777");
		
		while(1)
		{
		    # waiting for a new client connection
		    my $client_socket = $socket->accept();
		 
		    # get information about a newly connected client
		    my $client_address = $client_socket->peerhost();
		    my $client_port = $client_socket->peerport();
		    dplog("connection from $client_address:$client_port");
		 
		 	# TODO: fork here again!
		 
		    # read up to 10240 characters from the connected client
		    my $data = "";
		    $client_socket->recv($data, $option->{maxdata});
		 
		 	my $json        = JSON->new->utf8;
 			my $rem_json = $json->decode( $data );

		 
		 	my $answer = {};
		 	$answer->{sender}->{address}= "127.0.0.1";
			$answer->{sender}->{port}= $option->{port};
			$answer->{sender}->{name}= $angelName;
			
			$answer->{receiver}->{address}= $client_address;
			$answer->{receiver}->{port}= $client_port;
			$answer->{receiver}->{name}= $rem_json->{sender}->{name};
			
			$answer->{command}->{name}= $rem_json->{command}->{name};
			$answer->{command}->{arguments}= $rem_json->{command}->{arguments};
			
			
		 
		 	# TODO: check if correct receiver (multiple ports...) AND sender (prevent hacking) (only in strictmode)
		 
		 	# TODO: if command == help -> return all commands
		 
		 	if($rem_json->{command}->{name} ne "ping"){
		 		$answer->{answer}->{text}= "Command ".$rem_json->{command}->{name}." not supported";
				$answer->{answer}->{code}= 99;
		 	}else {	
			 	my $p = Net::Ping->new();
			 	my $text = "";
			 	my $code=0;
			 	if($p->ping($rem_json->{command}->{arguments})){
			 		$answer->{answer}->{text}= $rem_json->{command}->{arguments}." is alive";
					$answer->{answer}->{code}= 0;
			 	} else {
			 		$answer->{answer}->{text}= $rem_json->{command}->{arguments}." is not reachable";
					$answer->{answer}->{code}= 1;
			 	}
		   		$p->close();
		 	}
		 
		 	$answer->{timestamp}= strftime("%Y-%m-%dT%H:%M:%S", localtime(time()));
		 
		    # write response data to the connected client
		    $client_socket->send( $json->utf8->encode( $answer ));
		 
		    # notify client that response has been sent
		    shutdown($client_socket, 1);
		}
		 
		$socket->close();
	}
	$pidfile->remove if defined $pidfile;
}

#----------------------------------------------------------------------------
# Subs
#----------------------------------------------------------------------------
sub daemonize{
	use POSIX qw(setsid);
	chdir '/';
	umask 0;
	open STDIN,  '/dev/null'   or die "Can't read /dev/null: $!";
	open STDOUT, '>>/dev/null' or die "Can't write to /dev/null: $!";
	open STDERR, '>>/dev/null' or die "Can't write to /dev/null: $!";
	defined( my $pid = fork ) or die "Can't fork: $!";
	exit if $pid;
	POSIX::setsid() or die "Can't start a new session.";
	$SIG{INT} = $SIG{TERM} = $SIG{HUP} = \&signalHandler;
	$SIG{PIPE} = 'ignore';
	$pidfile = File::Pid->new( { file => $pidFile, } );
}
sub signalHandler {
	$dieNow = 1;    # this will cause the "infinite loop" to exit
}
sub dplog ($) {
	my $text = shift;
	if($option->{debug} ne 0){
		print strftime("%Y-%m-%dT%H:%M:%S", localtime(time())).": ".$text."\n";
	}
}